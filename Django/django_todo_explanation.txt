
Basic To-Do List Application Using Django - Explanation

1. Introduction and Setup
--------------------------
What is Django?
Django is a Python-based web framework that helps you build web applications quickly and with less code. It takes care of many things like database management, user authentication, and security, so you can focus on building your app.

Why is Django good for web development?
1. Built-in Features – It comes with ready-to-use tools like the admin panel, authentication system, and form handling.
2. Security – Django protects against common web attacks like SQL injection and cross-site scripting.

How to set it up in a virtual environment:
- Create a virtual environment to keep your project’s dependencies separate.
- Activate the environment.
- Install Django using pip.


2. Creating the Project
--------------------------
To start a new Django project named 'todolist', use a command. This sets up the main structure of the project with settings and config files.

Then create an app called 'tasks' inside the project. An app is like a module that handles a specific function – in this case, managing to-do tasks.


3. Models and Migrations
--------------------------
What’s a model?
A model is a Python class that maps to a database table. For the to-do list, we define a Task model with:
- A title (text),
- A completed status (true/false),
- A created_at timestamp (when the task was added).

Migrations are Django’s way of syncing the database with your model changes. First, you create migration files, then apply them to update the database.


4. Views, Templates, and Static Files
---------------------------------------
View:
A view is a function that gets data from the database and passes it to a template. Here, it fetches all tasks and sends them to the frontend to be displayed.

Template:
Templates are HTML files where we display the data. In home.html, we loop through all tasks and show each title along with whether it's done or still pending.

Static Files (like CSS):
CSS files are stored in a static folder to style the page. To link a CSS file:
- Load the static files in the HTML template.
- Use the {% static %} tag to include the path to your CSS.
